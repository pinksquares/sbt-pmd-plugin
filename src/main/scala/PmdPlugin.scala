import sbt.Keys._
import sbt._

import scala.io.Source

/**
 * Implementation for the SBT PMD Plugin.
 * @author Michael Vaughan
 */
object PmdPlugin extends AutoPlugin {

  object autoImport {

    val pmdReportFormat = settingKey[String]("The PMD Report format output. Supported values that also successfully " +
      "detect if warnings were found include csv, emacs, text, ideaj, textpad, html, summaryhtml, vbhtml, xml, xslt, " +
      "and textcolor. Default: text")
    val pmdRulesets = settingKey[Seq[String]]("The rulesets to run. Default: rulesets/java/basic.xml")
    val pmdFailBuild = settingKey[Boolean]("If true, any warnings from PMD will fail the build. Default: true")
    val pmdLanguage = settingKey[String]("The language PMD should use. Default: java")
    val pmdLanguageVersion = settingKey[String]("The version of a language PMD should use. Default: 1.8")
    val pmdReportFile = settingKey[File]("The file where PMD should generate the report. Default: $target/pmd-report.txt")
    val pmd = taskKey[Unit]("Runs PMD against the project")
  }

  import autoImport._

  override def projectSettings = Seq(
    pmdReportFormat := "text",
    pmdRulesets := Seq("rulesets/java/basic.xml"),
    pmdLanguage := "java",
    pmdLanguageVersion := "1.8",
    pmdReportFile := target.value / "pmd-report.txt",
    pmdFailBuild := true,
    pmd := pmdTask.value
  )

  lazy val pmdTask = Def.task {
    import net.sourceforge.pmd.PMD.{main => PmdMain}
    val src = (sourceDirectory in Compile).value
    val reportFormat = pmdReportFormat.value
    val reportFile = pmdReportFile.value
    val log = streams.value.log
    val args: Array[String] = List(
      "-d", src.getAbsolutePath,
      "-f", reportFormat,
      "-R", pmdRulesets.value.mkString(","),
      "-version", pmdLanguageVersion.value,
      "-language", pmdLanguage.value,
      "-reportfile", reportFile.getAbsolutePath
    ).toArray

    // Run PMD
    PmdMain(args)

    // Read the report generated by PMD
    val reportData: List[String] = Source.fromFile(reportFile).getLines().toList
    if (warningsFound(reportFormat, reportData)) {
      val msg = reportData.mkString("\n")
      // If warnings were detected, and we have setup to fail the build, call sys.error. Otherwise just log as error.
      if (pmdFailBuild.value) {
        sys.error(msg)
      } else {
        log.error(msg)
      }
    }
  }

  /**
   * Determine if there were any warnings found based on the data read from the report and the report format. The
   * current implementation is fairly hacky and could probably be improved.
   * @param format The report format PMD used.
   * @param data The data of the report with each element in the list being a line in the report.
   * @return True if it is determined warnings were found, otherwise false.
   */
  def warningsFound(format: String, data: List[String]) : Boolean = format match {
    case "csv" => data.length > 1
    case "emacs" | "text" | "ideaj" | "textpad" => data.nonEmpty
    case "html" | "summaryhtml" | "vbhtml" => data.mkString.contains("</td>")
    case "xml" => data.mkString.contains("</violation>")
    case "xslt" => data.mkString.contains(">Violation</th>")
    case "textcolor" => !data.mkString.contains("[1;33m*\u001B[0m warnings: \u001B[1;37m0\u001B[0m")
    case _ => false
  }

}
